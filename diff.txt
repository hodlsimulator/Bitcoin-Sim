diff --git a/BTC Simulator/InteractiveMonteCarloChartView.swift b/BTC Simulator/InteractiveMonteCarloChartView.swift
index 780e044..f94edcd 100644
--- a/BTC Simulator/InteractiveMonteCarloChartView.swift	
+++ b/BTC Simulator/InteractiveMonteCarloChartView.swift	
@@ -15,26 +15,25 @@ struct InteractiveMonteCarloChartView: View {
     @EnvironmentObject var chartDataCache: ChartDataCache
     @EnvironmentObject var simSettings: SimulationSettings
     @EnvironmentObject var idleManager: IdleManager
-    
-    // *** Hook up chart data updates
     @EnvironmentObject var coordinator: SimulationCoordinator
-    
+
+    @Environment(\.presentationMode) private var presentationMode
+
     @State private var metalChart = MetalChartRenderer()
     @State private var isMetalChartReady = false
-    @State private var showMenu = false  // Tracks whether the drop-down menu is visible
+
+    // Tracks whether the drop-down menu is visible
+    @State private var showMenu = false
 
     var body: some View {
         GeometryReader { geo in
-            ZStack(alignment: .top) {  // <-- Use .top, not .topTrailing
-                // The chart background
+            ZStack(alignment: .top) {
                 Color.black.ignoresSafeArea()
 
                 if isMetalChartReady {
                     MetalChartContainerView(metalChart: metalChart)
                         .environmentObject(idleManager)
                         .onChange(of: geo.size) { _, newSize in
-                            // If the view size changes (e.g. rotation),
-                            // update the rendererâ€™s viewport.
                             metalChart.viewportSize = newSize
                             metalChart.updateViewport(to: newSize)
                         }
@@ -43,7 +42,7 @@ struct InteractiveMonteCarloChartView: View {
                         .foregroundColor(.white)
                 }
 
-                // Our custom drop-down menu
+                // Dropdown menu (centred)
                 if showMenu {
                     VStack(spacing: 10) {
                         NavigationLink(
@@ -53,68 +52,84 @@ struct InteractiveMonteCarloChartView: View {
                                 .environmentObject(idleManager)
                                 .environmentObject(coordinator)
                         ) {
-                            // HStack with spacers to centre
                             HStack {
                                 Spacer()
                                 Text("Portfolio")
                                 Spacer()
                             }
                         }
-                        // Hide the dropdown once tapped
+                        // Hide dropdown on tap
                         .simultaneousGesture(TapGesture().onEnded {
                             showMenu = false
                         })
                     }
-                    .frame(maxWidth: .infinity)                // Fill the full width
+                    .frame(maxWidth: .infinity)
                     .padding()
                     .background(Color(UIColor.systemBackground))
                     .cornerRadius(8)
                     .shadow(radius: 4)
-                    .padding(.horizontal, 16)                 // Equal horizontal padding
+                    .padding(.horizontal, 16)
                     .transition(.move(edge: .top))
                 }
             }
             .onAppear {
                 // Reset idle timer
                 idleManager.resetIdleTimer()
-                
+
                 DispatchQueue.main.async {
-                    // 1) Provide the actual size to the renderer
+                    // 1) Provide the size to the Metal renderer
                     metalChart.viewportSize = geo.size
 
-                    // 2) Set up the Metal chart (BTC price)
+                    // 2) Set up the chart for BTC Price
                     metalChart.setupMetal(
                         in: geo.size,
                         chartDataCache: chartDataCache,
                         simSettings: simSettings,
-                        isPortfolioChart: false // This is the BTC chart
+                        isPortfolioChart: false
                     )
 
-                    // *** Tie simulationCoordinator updates => rebuild line buffers
+                    // Rebuild line buffers when coordinator data changes
                     coordinator.onChartDataUpdated = {
                         DispatchQueue.main.async {
                             self.metalChart.buildLineBuffers()
                         }
                     }
-                    
-                    // 3) Mark it ready
+
+                    // 3) Mark ready
                     isMetalChartReady = true
                 }
             }
-            .navigationBarTitle("Bitcoin Price", displayMode: .inline)
-            .toolbar {
-                ToolbarItem(placement: .navigationBarTrailing) {
-                    // The chevron button
-                    Button {
-                        withAnimation {
-                            showMenu.toggle()
-                        }
-                    } label: {
-                        Image(systemName: showMenu ? "chevron.up" : "chevron.down")
+        }
+        // Make the nav bar inline and black
+        .navigationBarTitle("Bitcoin Price", displayMode: .inline)
+        .toolbarBackground(Color.black, for: .navigationBar)
+        .toolbarBackground(.visible, for: .navigationBar)
+
+        // Hide default back button text if you also want no text from the prior screen
+        .navigationBarBackButtonHidden(true)
+
+        // Provide our own toolbar with a custom back arrow (if needed) and the chevron dropdown
+        .toolbar {
+            // If you need to remove text from the back button here too:
+            ToolbarItem(placement: .navigationBarLeading) {
+                Button {
+                    presentationMode.wrappedValue.dismiss()
+                } label: {
+                    Image(systemName: "chevron.left")
+                }
+            }
+
+            // Chevron for the drop-down
+            ToolbarItem(placement: .navigationBarTrailing) {
+                Button {
+                    withAnimation {
+                        showMenu.toggle()
                     }
+                } label: {
+                    Image(systemName: showMenu ? "chevron.up" : "chevron.down")
                 }
             }
         }
     }
 }
-    
\ No newline at end of file
+                
\ No newline at end of file
diff --git a/BTC Simulator/InteractivePortfolioChartView.swift b/BTC Simulator/InteractivePortfolioChartView.swift
index 2ae0094..1ceb64c 100644
--- a/BTC Simulator/InteractivePortfolioChartView.swift	
+++ b/BTC Simulator/InteractivePortfolioChartView.swift	
@@ -11,21 +11,26 @@ import MetalKit
 import simd
 
 /// A SwiftUI view that renders the Portfolio chart using Metal.
-/// No orientation observer or snapshot logic needed.
 struct InteractivePortfolioChartView: View {
     @EnvironmentObject var chartDataCache: ChartDataCache
     @EnvironmentObject var simSettings: SimulationSettings
     @EnvironmentObject var idleManager: IdleManager
     @EnvironmentObject var coordinator: SimulationCoordinator
-    
+
+    // Allows us to dismiss ourselves (custom back button).
+    @Environment(\.presentationMode) private var presentationMode
+
     @State private var metalChart = MetalChartRenderer()
     @State private var isMetalChartReady = false
-    
+
+    // Tracks whether the dropdown menu is visible
+    @State private var showMenu = false
+
     var body: some View {
         GeometryReader { geo in
-            ZStack {
+            ZStack(alignment: .top) {
                 Color.black.ignoresSafeArea()
-                
+
                 if isMetalChartReady {
                     MetalChartContainerView(metalChart: metalChart)
                         .environmentObject(idleManager)
@@ -37,16 +42,46 @@ struct InteractivePortfolioChartView: View {
                     Text("Loading portfolio chart...")
                         .foregroundColor(.white)
                 }
+
+                // Dropdown menu (centred)
+                if showMenu {
+                    VStack(spacing: 10) {
+                        NavigationLink(
+                            destination: InteractiveMonteCarloChartView()
+                                .environmentObject(chartDataCache)
+                                .environmentObject(simSettings)
+                                .environmentObject(idleManager)
+                                .environmentObject(coordinator)
+                        ) {
+                            HStack {
+                                Spacer()
+                                Text("Bitcoin Price")
+                                Spacer()
+                            }
+                        }
+                        // Hide dropdown on tap
+                        .simultaneousGesture(TapGesture().onEnded {
+                            showMenu = false
+                        })
+                    }
+                    .frame(maxWidth: .infinity)
+                    .padding()
+                    .background(Color(UIColor.systemBackground))
+                    .cornerRadius(8)
+                    .shadow(radius: 4)
+                    .padding(.horizontal, 16)
+                    .transition(.move(edge: .top))
+                }
             }
             .onAppear {
                 // Reset the IdleManager timer
                 idleManager.resetIdleTimer()
-                
+
                 DispatchQueue.main.async {
-                    // 1) Provide the actual size to the renderer
+                    // 1) Provide the size to the Metal renderer
                     metalChart.viewportSize = geo.size
 
-                    // 2) Call setupMetal ONCE, indicating "portfolio" data
+                    // 2) Setup the Metal chart for "portfolio" data
                     metalChart.setupMetal(
                         in: geo.size,
                         chartDataCache: chartDataCache,
@@ -54,22 +89,47 @@ struct InteractivePortfolioChartView: View {
                         isPortfolioChart: true
                     )
 
-                    // Rebuild GPU buffers whenever coordinatorâ€™s data changes
+                    // Rebuild GPU buffers whenever the coordinatorâ€™s data changes
                     coordinator.onChartDataUpdated = {
                         DispatchQueue.main.async {
                             self.metalChart.buildLineBuffers()
                         }
                     }
 
-                    // 3) Mark it ready
+                    // 3) Mark the chart as ready
                     isMetalChartReady = true
                 }
             }
         }
+        // Make the nav bar inline and black
         .navigationBarTitle("Portfolio", displayMode: .inline)
-        // iOS 16+ approach to colour the inline nav bar
         .toolbarBackground(Color.black, for: .navigationBar)
         .toolbarBackground(.visible, for: .navigationBar)
+
+        // Hide the default back button text
+        .navigationBarBackButtonHidden(true)
+
+        // Provide our own toolbar with both a custom back arrow and the chevron dropdown
+        .toolbar {
+            // Custom back arrow (removes "Bitcoin Price" text from the back button)
+            ToolbarItem(placement: .navigationBarLeading) {
+                Button {
+                    presentationMode.wrappedValue.dismiss()
+                } label: {
+                    Image(systemName: "chevron.left")
+                }
+            }
+
+            // Chevron dropdown toggler
+            ToolbarItem(placement: .navigationBarTrailing) {
+                Button {
+                    withAnimation {
+                        showMenu.toggle()
+                    }
+                } label: {
+                    Image(systemName: showMenu ? "chevron.up" : "chevron.down")
+                }
+            }
+        }
     }
 }
-
diff --git a/BTCMonteCarlo.xcodeproj/project.xcworkspace/xcuserdata/conor.xcuserdatad/UserInterfaceState.xcuserstate b/BTCMonteCarlo.xcodeproj/project.xcworkspace/xcuserdata/conor.xcuserdatad/UserInterfaceState.xcuserstate
index df36695..87ed0ef 100644
Binary files a/BTCMonteCarlo.xcodeproj/project.xcworkspace/xcuserdata/conor.xcuserdatad/UserInterfaceState.xcuserstate and b/BTCMonteCarlo.xcodeproj/project.xcworkspace/xcuserdata/conor.xcuserdatad/UserInterfaceState.xcuserstate differ
